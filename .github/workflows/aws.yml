name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}                  
  ECR_REPOSITORY: ${{ secrets.AWS_REPOSITORY_NAME }}          
  ECS_SERVICE: reactapp               
  ECS_CLUSTER: react-app-cluster                 
  ECS_TASK_DEFINITION: .github/workflows/ask-definition.json 
  CONTAINER_NAME: react-app      
  IMAGE_TAG: latest   
  EXECUTION_ROLE_ARN: ${{ secrets.EXECUTIONROLEARN_KEY }}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Replace Secrets in JSON (After Image Push)
      run: |
        sed -i 's|${ECR_REPOSITORY}|${{ secrets.AWS_REPOSITORY_NAME }}|g' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's|${IMAGE_TAG}|${{ env.IMAGE_TAG }}|g' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's|${AWS_ACCESS_KEY_ID}|${{ secrets.AWS_ACCESS_KEY_ID }}|g' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's|${AWS_SECRET_ACCESS_KEY}|${{ secrets.AWS_SECRET_ACCESS_KEY }}|g' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's|${EXECUTION_ROLE_ARN}|${{ secrets.EXECUTIONROLEARN_KEY }}|g' ${{ env.ECS_TASK_DEFINITION }}

    - name: Register Amazon ECS Task Definition
      run: |
        aws ecs register-task-definition --cli-input-json file://${{ env.ECS_TASK_DEFINITION }}

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ env.IMAGE }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true 
